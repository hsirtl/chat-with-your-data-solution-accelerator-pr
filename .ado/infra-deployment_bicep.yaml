# This workflow will deploy the infrastructure in ADO
name: Infra_Deployment

trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
    - infra

parameters:
- name: updatePipelineVariables
  displayName: Update Pipeline Variables to reference deployed resources
  type: boolean
  default: true
- name: teardownEnvironment
  displayName: Teardown environment after successful deployment
  type: boolean
  default: false

variables:
  - name: hostingModel
    value: "container"
  - group: "COYDSA-LZA-Infra"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The lint job performs linting on the bicep code
  - job: lint
    pool:
      name: $(buildAgentPool)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under so your job can access it
      - checkout: self

      # Runs the Bicep linter to ensure build is successful
      - bash: az bicep build --file ./infra/main.bicep

  - job: validate
    pool:
      name: $(buildAgentPool)
    dependsOn: [lint]
    steps:
      - checkout: self
      - task: AzureCLI@2
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub validate \
              --location $(location) \
              --template-file ./infra/main.bicep \
              --parameters ./infra/main.bicepparam \
              --parameters environmentName=$(environmentName) \
              --parameters location=$(location) \
              --parameters principalId=$(principalId) \
              --parameters hostingModel=$(hostingModel)

  - job: preview
    pool:
      name: $(buildAgentPool)
    dependsOn: [lint, validate]
    steps:
      - checkout: self
      - task: AzureCLI@2
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az deployment sub what-if \
              --location $(location) \
              --template-file ./infra/main.bicep \
              --parameters ./infra/main.bicepparam \
              --parameters environmentName=$(environmentName) \
              --parameters location=$(location) \
              --parameters principalId=$(principalId) \
              --parameters hostingModel=$(hostingModel) \
              --verbose

  - job: deploy
    pool:
      name: $(buildAgentPool)
    dependsOn: [preview]
    steps:
      - checkout: self
      - task: AzureCLI@2
        name: deploy
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          failOnStandardError: false
          inlineScript: |
            az provider register --namespace Microsoft.AlertsManagement
            output=$(az deployment sub create \
              --name "COYDSA-$(Build.BuildId)" \
              --location $(location) \
              --template-file ./infra/main.bicep \
              --parameters ./infra/main.bicepparam \
              --parameters environmentName=$(environmentName) \
              --parameters location=$(location) \
              --parameters principalId=$(principalId) \
              --parameters hostingModel=$(hostingModel) \
              --only-show-errors )
            echo $output | jq .
            echo '====================================================================='
            frontendWebsiteName=$(echo $output | jq -r 'to_entries | map({key: .key | ascii_downcase, value: .value}) | from_entries | .properties.outputs.frontend_website_name.value')
            echo "Frontend website name: $frontendWebsiteName"
            echo "##vso[task.setvariable variable=frontendWebsiteName;isOutput=true]$frontendWebsiteName"
            adminWebsiteName=$(echo $output | jq -r 'to_entries | map({key: .key | ascii_downcase, value: .value}) | from_entries | .properties.outputs.admin_website_name.value')
            echo "Admin website name: $adminWebsiteName"
            echo "##vso[task.setvariable variable=adminWebsiteName;isOutput=true]$adminWebsiteName"

  - job: updatePipelineVariables
    pool:
      name: $(buildAgentPool)
    dependsOn: [deploy]
    variables:
      frontendWebsiteName: $[ dependencies.deploy.outputs['deploy.frontendWebsiteName'] ]
      adminWebsiteName: $[ dependencies.deploy.outputs['deploy.adminWebsiteName'] ]
    condition: and(succeeded(), ${{ eq(parameters.updatePipelineVariables, 'true') }})
    steps:
      - task: AzureCLI@2
        name: updatePipelineVariables
        displayName: Update Pipeline Variables
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            echo "Updating pipeline variables..."
            echo  $(variableGroupPAT) | az devops login --organization $(variableGroupOrg)
            group_id=$(az pipelines variable-group list \
              --org "$(variableGroupOrg)" \
              --project "$(variableGroupProject)" \
              --group-name "$(variableGroupName)" \
              --query '[0].id' -o json)
            az pipelines variable-group variable update \
              --org "$(variableGroupOrg)" \
              --project "$(variableGroupProject)" \
              --group-id $group_id \
              --name "frontendWebsiteName" \
              --value "$(frontendWebsiteName)"
            az pipelines variable-group variable update \
              --org "$(variableGroupOrg)" \
              --project "$(variableGroupProject)" \
              --group-id $group_id \
              --name "adminWebsiteName" \
              --value "$(adminWebsiteName)"
            az devops logout

  - job: teardown
    pool:
      name: $(buildAgentPool)
    variables:
      spokeRG: "rg-$(environmentName)"
    dependsOn: [deploy]
    condition: and(succeeded(), ${{ eq(parameters.teardownEnvironment, 'true') }})

    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo '====================================================================='
          echo 'Deleting resource group: $(spokeRG) ...'
          az group delete --name $(spokeRG) --yes
          echo 'Deleting deployment: COYDSA-$(Build.BuildId) ...'
          az deployment sub delete --name "COYDSA-$(Build.BuildId)" --no-wait
